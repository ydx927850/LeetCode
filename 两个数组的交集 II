给定两个数组，写一个方法来计算它们的交集。

例如:
给定 nums1 = [1, 2, 2, 1], nums2 = [2, 2], 返回 [2, 2].

注意：
   输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
   我们可以不考虑输出结果的顺序。
   
  方案一：
  先对两个数组排序，然后使用两个标记位分别遍历两个数组，如果1大于2，那么1向前一位，否则2向前1位，如果相等，就添加到结果中，并且1和2都向前1位。
  
  code:
  class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i=0;
        int j=0;
        List<Integer> result = new ArrayList<>();
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]>nums2[j]){
                j++;
            }else if(nums1[i]<nums2[j]){
                i++;
            }else{
                result.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] res = new int[result.size()];
        for(int p=0;p<res.length;p++){
            res[p]=result.get(p);
        }
        return res;
    }
}

方案二：
使用map构建数组1中数字和次数的映射，然后遍历数组2，当map中包含并且次数大于0时，就添加到结果并将次数减一。

code:
public int[] intersect(int[] nums1, int[] nums2) {

    List<Integer> tmp = new ArrayList<>();

    Map<Integer, Integer> map = new HashMap<Integer, Integer>();

    for (int i = 0; i < nums1.length; i++) {
        Integer value = map.get(nums1[i]);
        map.put(nums1[i], (value == null ? 0 : value) + 1);
    }

    for (int i = 0; i < nums2.length; i++) {
        if (map.containsKey(nums2[i]) && map.get(nums2[i]) != 0) {
            tmp.add(nums2[i]);
            map.put(nums2[i], map.get(nums2[i]) - 1);
        }
    }

    int[] result = new int[tmp.size()];
    int i = 0;
    for (Integer e : tmp)
        result[i++] = e;
    return result;
}
