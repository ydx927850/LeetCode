旋转数组

将包含 n 个元素的数组向右旋转 k 步。

例如，如果  n = 7 ,  k = 3，给定数组  [1,2,3,4,5,6,7]  ，向右旋转后的结果为 [5,6,7,1,2,3,4]。
要求空间复杂度为O(1)

思路一：
通过观察，可以发现可以将数组分成两个部分，然后分别转置，最后在对整体进行转置即可
比如：
[1,2,3,4,5,6,7] k=3
划分成[1,2,3,4]和[5,6,7]
分别转置:[4,3,2,1,7,6,5]，再整体转置[5,6,7,1,2,3,4]
要特别注意k大于数组长度的情况，此时采用余数的形式解决

code:
class Solution {
    public void rotate(int[] nums, int k) {    
        if(nums==null || k<0){
            return;
        }
        if(nums.length == 1){
            return;
        }
        int n = nums.length - (k%nums.length); //考虑k>nums.length的情况
        reverse(nums,0,n-1);
        reverse(nums,n,nums.length-1);
        reverse(nums,0,nums.length-1);
    }
    /**
    * 转置数组
    **/
    private void reverse(int[] nums,int i,int j){
        while(i<j){
            int tmp = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp;
            i++;
            j--;
        }
    }
}

思路二：
以移动的位数k为次数进行循环，每次将最高位移到最低位上，然后通过循环将后续的数组每一位都提高一位。

code：
class Solution {
    public void rotate(int[] nums, int k) {    
        if(nums==null || k<0){
            return;
        }
        if(nums.length == 1){
            return;
        }
        while(k>0){
            int tmp = nums[nums.length-1];
            for(int j = nums.length-2;j>=0;j--){
                //倒序循环，让数组整体抬高一位
                nums[j+1] = nums[j];
            }
            nums[0] = tmp;
            k--;
        }
    }
}
